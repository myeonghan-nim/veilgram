name: CI

on:
  push:
    branches: [ main ]
  pull_request:
  workflow_dispatch:

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

jobs:
  lint:
    name: Lint (black/isort/flake8)
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Cache pip
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: pip-${{ runner.os }}-${{ hashFiles('**/requirements*.txt', 'pyproject.toml', 'setup.cfg') }}
          restore-keys: |
            pip-${{ runner.os }}-

      - name: Install linters
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 flake8-bugbear flake8-comprehensions

      - name: Black check
        run: black --check --diff --color .

      - name: isort check
        run: isort --check-only .

      - name: Flake8
        run: flake8 .

  test:
    name: Tests (pytest via docker-compose.test.yml)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Generate .env.test from template
        run: |
          bash .github/scripts/gen-dotenv-test.sh

      - name: Compose up infra (with wait)
        run: |
          docker compose -f docker-compose.test.yml --env-file .env.test up -d --wait test_db test_redis test_minio

      - name: Run tests with docker compose
        run: |
          docker compose -f docker-compose.test.yml --env-file .env.test up --build --exit-code-from test test

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-html
          path: htmlcov
          if-no-files-found: ignore

  security:
    name: Security (pip-audit + bandit + trivy fs)
    runs-on: ubuntu-latest
    permissions:
      contents: read
      security-events: write
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: "3.12"

      - name: Install security tools
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit bandit[toml]
      - name: pip-audit
        run: |
          if [ -f requirements.txt ]; then pip-audit -r requirements.txt --strict; else echo "No requirements.txt"; fi
      - name: Bandit
        run: |
          bandit -c bandit.yaml -r .

      - name: Trivy filesystem scan
        uses: aquasecurity/trivy-action@0.21.0
        with:
          scan-type: fs
          format: sarif
          output: trivy-results.sarif
          severity: HIGH,CRITICAL

      - name: Upload Trivy SARIF
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: trivy-results.sarif

  container:
    name: Build container (and optional push)
    runs-on: ubuntu-latest
    needs: [lint, test, security]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GHCR
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build (no push on PR)
        uses: docker/build-push-action@v6
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/') }}
          tags: |
            ghcr.io/${{ github.repository }}:commit-${{ github.sha }}
            ${{ startsWith(github.ref, 'refs/tags/') && format('ghcr.io/{0}:{1}', github.repository, github.ref_name) || '' }}
