"""
Django settings for veilgram project.

Generated by 'django-admin startproject' using Django 5.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

import environ

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

env = environ.Env(
    DEBUG=(bool, True),  # Default to True for development
)
environ.Env.read_env(os.path.join(BASE_DIR, ".env"))


# Common

REDIS_URL = env.str("REDIS_URL", default="redis://redis:6379/0")


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = env.str("SECRET_KEY", default="__dev_insecure__change_me__")

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = env.bool("DEBUG", default=True)

ALLOWED_HOSTS = env.list("ALLOWED_HOSTS", default=["*"])


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "channels",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "storages",
    "assets",
    "comments",
    "feed",
    "hashtags",
    "moderation",
    "notifications",
    "polls",
    "posts.apps.PostsConfig",
    "profiles",
    "realtime",
    "relations",
    "reports",
    "search",
    "users",
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
]

ROOT_URLCONF = "veilgram.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "veilgram.wsgi.application"
ASGI_APPLICATION = "veilgram.asgi.application"


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": env("POSTGRES_DB"),
        "USER": env("POSTGRES_USER"),
        "PASSWORD": env("POSTGRES_PASSWORD"),
        "HOST": env("POSTGRES_HOST", default="db"),
        "PORT": 5432,
    }
}


# Cache

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": REDIS_URL,
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
        "KEY_PREFIX": "veilgram",
    }
}

SESSION_LIMIT_ONE_DEVICE = True

# Celery
CELERY_BROKER_URL = env.str("CELERY_BROKER_URL", REDIS_URL)
CELERY_RESULT_BACKEND = env.str("CELERY_RESULT_BACKEND", CELERY_BROKER_URL)
CELERY_TASK_ALWAYS_EAGER = False
CELERY_TASK_DEFAULT_QUEUE = "default"
CELERY_TASK_ROUTES = {
    "notifications.tasks.*": {"queue": "notifications"},
    "posts.tasks.on_post_*": {"queue": "posts"},
}
CELERY_TASK_TIME_LIMIT = 30
CELERY_TASK_SOFT_TIME_LIMIT = 25
CELERY_ACKS_LATE = True
CELERY_WORKER_PREFETCH_MULTIPLIER = 10

PUSH_PROVIDER = env.str("PUSH_PROVIDER", default="dummy")  # apns | fcm | dummy
EVENT_BUS_BACKEND = env.str("EVENT_BUS_BACKEND", default="dummy")  # dummy | kafka | rabbitmq

# Channels
CHANNEL_LAYER_CAPACITY = env.int("CHANNEL_LAYER_CAPACITY", default=1000)
CHANNEL_LAYERS = {
    "default": {
        # 운영: channels_redis, 테스트: in-memory로 override (pytest에서 처리)
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [REDIS_URL],
            "capacity": CHANNEL_LAYER_CAPACITY,
        },
    }
}


# Media Storage

DEFAULT_FILE_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"
AWS_S3_ENDPOINT_URL = env.str("AWS_S3_ENDPOINT_URL", default="http://minio:9000")
AWS_ACCESS_KEY_ID = env("MINIO_ROOT_USER")
AWS_SECRET_ACCESS_KEY = env("MINIO_ROOT_PASSWORD")
AWS_STORAGE_BUCKET_NAME = env.str("AWS_STORAGE_BUCKET_NAME", default="media")
AWS_S3_USE_SSL = False
AWS_S3_REGION_NAME = ""

AWS_S3_SIGNATURE_VERSION = "s3v4"
AWS_S3_ADDRESSING_STYLE = "path"
AWS_QUERYSTRING_AUTH = False

ASSET_LIMITS = {
    "IMAGE_MAX_BYTES": 10 * 1024 * 1024,  # 10MB
    "VIDEO_MAX_BYTES": 200 * 1024 * 1024,  # 200MB
    "IMAGE_MIME_WHITELIST": {"image/jpeg", "image/png"},
    "VIDEO_MIME_WHITELIST": {"video/mp4"},
}

MEDIA_URL = "/media/"
MEDIA_ROOT = os.path.join(BASE_DIR, "media")


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "Asia/Seoul"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATICFILES_STORAGE = "storages.backends.s3boto3.S3Boto3Storage"

STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "static")

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

# User model

AUTH_USER_MODEL = "users.User"


# REST framework

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
}

SIMPLE_JWT = {
    "USER_ID_FIELD": "id",
    "USER_ID_CLAIM": "user_id",
    "ACCESS_TOKEN_LIFETIME": timedelta(days=1),
    "REFRESH_TOKEN_LIFETIME": timedelta(days=7),
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
}


# Password hashing

PASSWORD_HASHERS = [
    "django.contrib.auth.hashers.Argon2PasswordHasher",
    "django.contrib.auth.hashers.PBKDF2PasswordHasher",
]


# LIMITS

POST_LIMITS = {
    "MAX_ATTACHMENTS": 10,
}


# Moderation settings

MODERATION_ENABLED = True
MODERATION_BLOCKED_WORDS = {"spam", "abuse", "badword"}
NSFW_CHECK_ENABLED = True


# Events emitter

RELATIONS_EVENT_EMITTER = "relations.events.logging_emitter"


# OpenSearch

OPENSEARCH = {
    # 기능 토글: false면 테스트/로컬에서 In-Memory 백엔드 사용
    "ENABLED": env.bool("OPENSEARCH_ENABLED", default=False),
    # 쉼표(,)로 구분된 호스트 목록: http://opensearch:9200,http://opensearch2:9200
    "HOSTS": env.list("OPENSEARCH_HOSTS", default=["http://opensearch:9200"]),
    # BASIC Auth (없으면 빈 문자열)
    "USER": env.str("OPENSEARCH_USER", default=""),
    "PASSWORD": env.str("OPENSEARCH_PASSWORD", default=""),
    # 인덱스 접두사 (테넌트/스테이지 구분용)
    "INDEX_PREFIX": env.str("OPENSEARCH_INDEX_PREFIX", default="veilgram"),
    # 한국어 형태소 분석기 사용 여부 (플러그인 없는 환경은 False)
    "USE_NORI": env.bool("OPENSEARCH_USE_NORI", default=False),
    # 클라이언트 타임아웃
    "TIMEOUT": env.int("OPENSEARCH_TIMEOUT", default=3),
}


# Feed settings

FEED_BUS_DRIVER = env("FEED_BUS_DRIVER", default="kafka")  # kafka | rabbitmq
FEED_EVENT_TOPICS = env.list("FEED_EVENT_TOPICS", default=["post.events", "hashtag.events", "user.events"])

# Kafka
FEED_KAFKA_BOOTSTRAP = env("FEED_KAFKA_BOOTSTRAP", default="kafka:9092")
FEED_KAFKA_GROUP_ID = env("FEED_KAFKA_GROUP_ID", default="feed-service")
FEED_KAFKA_TOPICS = FEED_EVENT_TOPICS

# RabbitMQ
FEED_RABBIT_URL = env("FEED_RABBIT_URL", default="amqp://guest:guest@rabbitmq:5672/")
FEED_RABBIT_EXCHANGE = env("FEED_RABBIT_EXCHANGE", default="app.events")
FEED_RABBIT_QUEUE = env("FEED_RABBIT_QUEUE", default="feed.service")
FEED_RABBIT_BINDINGS = FEED_EVENT_TOPICS

FEED_CACHE_TTL_SEC = env.int("FEED_CACHE_TTL_SEC", default=60)
FEED_UPDATES_CHANNEL = env("FEED_UPDATES_CHANNEL", default="feed:updates")


# Cassandra
CASSANDRA_ENABLED = env.bool("CASSANDRA_ENABLED", default=False)
CASSANDRA_CONTACT_POINTS = env.list("CASSANDRA_CONTACT_POINTS", default=["cassandra"])
CASSANDRA_KEYSPACE = env("CASSANDRA_KEYSPACE", default="veilgram")
