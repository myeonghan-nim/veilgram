x-app-env: &app-env
  env_file: [.env]
  networks: [veilgram-net]
  restart: unless-stopped

services:
  db:
    image: postgres:15-alpine
    container_name: veilgram_db
    <<: *app-env
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    shm_size: "256m"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL","pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 10s
      timeout: 5s
      retries: 10

  redis:
    image: redis:6-alpine
    container_name: veilgram_redis
    <<: *app-env
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    command: ["redis-server","--appendonly","yes","--requirepass","${REDIS_PASSWORD}"]
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD","redis-cli","-a","${REDIS_PASSWORD}","ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  minio:
    image: minio/minio:latest
    container_name: veilgram_minio
    <<: *app-env
    environment:
      MINIO_ROOT_USER: ${MINIO_ROOT_USER}
      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}
    command: ["server","/data","--console-address",":9001"]
    ports: ["9000:9000","9001:9001"]
    volumes:
      - minio_data:/data

  minio-mc-mb:
    image: minio/mc:latest
    container_name: veilgram_minio_mc_mb
    <<: *app-env
    depends_on: [minio]
    environment:
      MC_HOST_minio: "http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000"
    command: ["mb", "-p", "minio/${AWS_STORAGE_BUCKET_NAME:-veilgram}"]
    restart: "on-failure"

  minio-mc-public:
    profiles: ["public"]
    image: minio/mc:latest
    container_name: veilgram_minio_mc_public
    <<: *app-env
    depends_on: [minio-mc-mb]
    environment:
      MC_HOST_minio: "http://${MINIO_ROOT_USER}:${MINIO_ROOT_PASSWORD}@minio:9000"
    command: ["anonymous", "set", "download", "minio/${AWS_STORAGE_BUCKET_NAME:-veilgram}"]
    restart: "no"

  migrate:
    build: { context: ., target: app }
    container_name: veilgram_migrate
    <<: *app-env
    depends_on:
      db: { condition: service_healthy }
    command:
      - sh
      - -c
      - >
        for i in $(seq 1 30); do
          pg_isready -h db -p 5432 -U ${POSTGRES_USER} -d ${POSTGRES_DB} && break;
          echo '[migrate] waiting for db... ('"$$i"'/30)'; sleep 2;
        done && python manage.py migrate --noinput
    restart: "no"

  web:
    build: { context: ., target: app }
    container_name: veilgram_web
    <<: *app-env
    volumes:
      - web_static:/app/static
      - web_media:/app/media
    expose: ["8000"]
    depends_on:
      db: { condition: service_healthy }
      redis: { condition: service_started }
      minio: { condition: service_started }
    command: ["sh","-c","python manage.py collectstatic --noinput && gunicorn veilgram.wsgi:application --bind 0.0.0.0:8000 --workers 4 --threads 8 --timeout 60"]
    healthcheck:
      test: ["CMD","python","-c","import urllib.request,sys; sys.exit(0 if urllib.request.urlopen('http://localhost:8000/healthz', timeout=2).status==200 else 1)"]
      interval: 10s
      timeout: 3s
      retries: 3

  nginx:
    image: nginx:stable-alpine
    container_name: veilgram_nginx
    <<: *app-env
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d/:/etc/nginx/conf.d/:ro
      - ./nginx/certs/:/etc/nginx/certs/:ro
      - web_static:/usr/share/nginx/html/static:ro
      - web_media:/usr/share/nginx/html/media:ro
    ports: ["80:80","443:443"]
    depends_on: [web]
    healthcheck:
      test: ["CMD-SHELL","wget -q -O- http://localhost/healthz || exit 1"]
      interval: 10s
      timeout: 3s
      retries: 3

  # ---- Optional: Celery (앱 준비되면 profile로 켜세요) ----
  celery_worker:
    profiles: ["celery"]
    build: { context: ., target: app }
    container_name: veilgram_celery_worker
    <<: *app-env
    depends_on: [db, redis]
    command: ["celery","-A","veilgram","worker","-l","info","-Q","default,assets,notifications","--concurrency","4"]

  celery_beat:
    profiles: ["celery"]
    build: { context: ., target: app }
    container_name: veilgram_celery_beat
    <<: *app-env
    depends_on: [db, redis]
    command: ["celery","-A","veilgram","beat","-l","info"]

  # ---- Kafka profile ----
  kafka:
    profiles: ["kafka"]
    image: bitnami/kafka:3
    container_name: veilgram_kafka
    <<: *app-env
    expose: ["9092"]
    environment:
      KAFKA_ENABLE_KRAFT: "yes"
      KAFKA_CFG_NODE_ID: "1"
      KAFKA_CFG_PROCESS_ROLES: "broker,controller"
      KAFKA_CFG_LISTENERS: "PLAINTEXT://:9092,CONTROLLER://:9093"
      KAFKA_CFG_ADVERTISED_LISTENERS: "PLAINTEXT://kafka:9092"
      KAFKA_CFG_CONTROLLER_QUORUM_VOTERS: "1@kafka:9093"
      KAFKA_CFG_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP: "CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT"
    volumes:
      - kafka_data:/bitnami/kafka
    healthcheck:
      test: ["CMD-SHELL","getent hosts kafka >/dev/null 2>&1 || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 10

  feed_consumer_kafka:
    profiles: ["kafka"]
    build: { context: ., target: app }
    container_name: veilgram_feed_consumer_kafka
    <<: *app-env
    depends_on: [web, redis, db, kafka]
    environment: { FEED_BUS_DRIVER: kafka }
    command: ["python","manage.py","feed_consumer"]

  # ---- RabbitMQ profile ----
  rabbitmq:
    profiles: ["rabbitmq"]
    image: rabbitmq:3-management-alpine
    container_name: veilgram_rabbitmq
    <<: *app-env
    environment:
      RABBITMQ_DEFAULT_USER: ${RABBITMQ_USER}
      RABBITMQ_DEFAULT_PASS: ${RABBITMQ_PASSWORD}
    expose: ["5672"]
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: ["CMD-SHELL","rabbitmq-diagnostics -q ping"]
      interval: 10s
      timeout: 5s
      retries: 10

  feed_consumer_rabbitmq:
    profiles: ["rabbitmq"]
    build: { context: ., target: app }
    container_name: veilgram_feed_consumer_rabbitmq
    <<: *app-env
    depends_on: [web, redis, db, rabbitmq]
    environment: { FEED_BUS_DRIVER: rabbitmq }
    command: ["python","manage.py","feed_consumer"]

volumes:
  web_static:
  web_media:
  postgres_data:
  redis_data:
  minio_data:
  kafka_data:
  rabbitmq_data:

networks:
  veilgram-net:
    driver: bridge
